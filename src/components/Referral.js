import React, { useState, useEffect } from 'react';
import './Referral.css';

const Referral = () => {
  const [referralData, setReferralData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showWithdrawModal, setShowWithdrawModal] = useState(false);
  const [withdrawMethod, setWithdrawMethod] = useState('');
  const [withdrawAddress, setWithdrawAddress] = useState('');

  useEffect(() => {
    fetchReferralData();
  }, []);

  const fetchReferralData = async () => {
    try {
      const response = await fetch('/api/referral/stats', {
        headers: {
          'x-telegram-init-data': window.Telegram.WebApp.initData,
        }
      });
      const data = await response.json();
      setReferralData(data);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.error('Error fetching referral data:', error);
    } finally {
      setLoading(false);
    }
  };

  const copyReferralLink = () => {
    if (referralData?.referralCode) {
      const link = `https://t.me/ZeusVPNBot?start=ref_${referralData.referralCode}`;
      navigator.clipboard.writeText(link);
      window.Telegram.WebApp.showAlert('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    }
  };

  const handleWithdraw = async () => {
    try {
      const response = await fetch('/api/referral/payout/request', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-telegram-init-data': window.Telegram.WebApp.initData,
        },
        body: JSON.stringify({
          method: withdrawMethod,
          address: withdrawAddress
        })
      });

      const data = await response.json();
      if (data.success) {
        window.Telegram.WebApp.showAlert('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è—Ç–∞!');
        setShowWithdrawModal(false);
        fetchReferralData();
      } else {
        throw new Error(data.error);
      }
    } catch (error) {
      window.Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  if (loading) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div className="error">{error}</div>;

  return (
    <div className="referral">
      <div className="referral-header">
        <h2>–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</h2>
        <p className="referral-description">
          –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 30% –æ—Ç –∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π!
        </p>
      </div>

      <div className="referral-stats">
        <div className="stat-card">
          <span className="stat-value">{referralData?.referralCount || 0}</span>
          <span className="stat-label">–†–µ—Ñ–µ—Ä–∞–ª–æ–≤</span>
        </div>
        <div className="stat-card">
          <span className="stat-value">{referralData?.currentEarnings || 0}‚ÇΩ</span>
          <span className="stat-label">–î–æ—Å—Ç—É–ø–Ω–æ</span>
        </div>
        <div className="stat-card">
          <span className="stat-value">{referralData?.totalEarnings || 0}‚ÇΩ</span>
          <span className="stat-label">–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</span>
        </div>
      </div>

      <div className="referral-link-card">
        <h3>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</h3>
        <div className="link-container" onClick={copyReferralLink}>
          <span className="link">t.me/ZeusVPNBot?start=ref_{referralData?.referralCode}</span>
          <button className="copy-button">üìã</button>
        </div>
      </div>

      {referralData?.currentEarnings >= 1000 && (
        <button 
          className="withdraw-button"
          onClick={() => setShowWithdrawModal(true)}
        >
          –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
        </button>
      )}

      {referralData?.recentPayments?.length > 0 && (
        <div className="recent-payments">
          <h3>–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π</h3>
          <div className="payments-list">
            {referralData.recentPayments.map((payment, index) => (
              <div key={index} className="payment-item">
                <div className="payment-amount">+{payment.amount}‚ÇΩ</div>
                <div className="payment-date">
                  {new Date(payment.date).toLocaleDateString()}
                </div>
                <div className={`payment-status ${payment.status}`}>
                  {payment.status}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {showWithdrawModal && (
        <div className="modal">
          <div className="modal-content">
            <h3>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</h3>
            <select 
              value={withdrawMethod}
              onChange={(e) => setWithdrawMethod(e.target.value)}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±</option>
              <option value="card">–ù–∞ –∫–∞—Ä—Ç—É</option>
              <option value="crypto">–í –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ</option>
            </select>
            <input
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"
              value={withdrawAddress}
              onChange={(e) => setWithdrawAddress(e.target.value)}
            />
            <div className="modal-buttons">
              <button onClick={handleWithdraw}>–í—ã–≤–µ—Å—Ç–∏</button>
              <button onClick={() => setShowWithdrawModal(false)}>–û—Ç–º–µ–Ω–∞</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Referral; 