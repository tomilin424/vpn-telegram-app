const { Markup } = require('telegraf');
const paystoService = require('../../services/paystoService');
const { createOrder } = require('../../services/orderService');

async function handlePayment(ctx) {
    try {
        await ctx.reply(
            'üé£ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ZeusVPN\n\n' +
            'üéÅ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫—É:\n' +
            'üöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n' +
            '‚ö°Ô∏è –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n' +
            'üì± –î–æ—Å—Ç—É–ø —Å–æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n' +
            'üõ° –ù–∞–¥–µ–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞\n' +
            'üåø –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n' +
            'üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: 100‚ÇΩ/–º–µ—Å—è—Ü\n\n' +
            'üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n' +
            '‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n' +
            '‚Ä¢ –ö—Ä–∏–ø—Ç–∞',
            Markup.keyboard([
                ['üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π'],
                ['ü™ô –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π'],
                ['‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
            ]).resize()
        );
    } catch (error) {
        console.error('Payment error:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleCardPayment(ctx) {
    try {
        const orderId = `ORDER_${Date.now()}_${ctx.from.id}`;
        const amount = 100;

        await createOrder({
            orderId,
            userId: ctx.from.id,
            amount,
            status: 'pending'
        });

        const paymentUrl = paystoService.generatePaymentUrl(orderId, amount);

        await ctx.reply(
            '–î–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:',
            Markup.inlineKeyboard([
                [Markup.button.url('–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π', paymentUrl)]
            ])
        );
    } catch (error) {
        console.error('Card payment error:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleCryptoPayment(ctx) {
    try {
        const invoice = {
            asset: 'USDT',
            amount: 1.5, // —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç 100 —Ä—É–±–ª–µ–π –≤ USDT
            description: 'VPN Service Payment',
            hidden_message: 'Thank you for your payment!',
            paid_btn_name: 'Open VPN Bot',
            paid_btn_url: `https://t.me/zeusvpnbot_bot?start=crypto_success_${ctx.from.id}`
        };

        await ctx.reply(
            '–î–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:',
            Markup.inlineKeyboard([
                [Markup.button.url('–û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π', `https://t.me/CryptoBot?start=pay_${Buffer.from(JSON.stringify(invoice)).toString('base64')}`)]
            ])
        );
    } catch (error) {
        console.error('Crypto payment error:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

module.exports = {
    handlePayment,
    handleCardPayment,
    handleCryptoPayment
}; 