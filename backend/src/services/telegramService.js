const { Telegraf } = require('telegraf');
const bot = new Telegraf(process.env.BOT_TOKEN);
const User = require('../models/user');

class TelegramService {
  constructor() {
    this.initializeBot();
  }

  initializeBot() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.command('start', (ctx) => {
      ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZeusVPN! ‚ö°\n\n–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π VPN-—Å–µ—Ä–≤–∏—Å —Å –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    bot.command('help', (ctx) => {
      ctx.reply(`üîß –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é ZeusVPN:

1. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:
   - –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
   - –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
   - –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º

2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
   - –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"
   - –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä
   - –ì–æ—Ç–æ–≤–æ!

3. –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
   –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /support

‚ö° –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /support
    bot.command('support', (ctx) => {
      ctx.reply('–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ: @support_zeus_vpn');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã)
    bot.on('photo', async (ctx) => {
      const caption = ctx.message.caption;
      if (!caption || !caption.includes('PAY_')) {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.');
        return;
      }

      const paymentId = caption.match(/PAY_\d+_\d+/)[0];
      const userId = ctx.from.id;

      try {
        const user = await User.findOne({ 
          where: { telegramId: userId },
          raw: true 
        });

        const payment = user.paymentHistory.find(p => p.id === paymentId && p.status === 'pending');
        
        if (!payment) {
          ctx.reply('–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.telegram.sendPhoto(
          process.env.ADMIN_CHAT_ID,
          ctx.message.photo[ctx.message.photo.length - 1].file_id,
          {
            caption: `
‚ö° –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ ZeusVPN

üë§ User ID: ${userId}
üë§ Username: @${ctx.from.username || '–Ω–µ—Ç'}
üí∞ –°—É–º–º–∞: ${payment.amount} USDT
üîë Payment ID: ${paymentId}

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
/confirm ${paymentId}

–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:
/reject ${paymentId}
            `
          }
        );

        ctx.reply('–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.');
      } catch (error) {
        console.error('Error processing payment confirmation:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support_zeus_vpn');
      }
    });

    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.command('confirm', async (ctx) => {
      if (ctx.from.id.toString() !== process.env.ADMIN_CHAT_ID) return;

      const paymentId = ctx.message.text.split(' ')[1];
      if (!paymentId) return;

      const userId = paymentId.split('_')[1];
      await this.processSuccessfulPayment(userId);
      ctx.reply('‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω');
    });

    bot.command('reject', async (ctx) => {
      if (ctx.from.id.toString() !== process.env.ADMIN_CHAT_ID) return;

      const paymentId = ctx.message.text.split(' ')[1];
      if (!paymentId) return;

      const userId = paymentId.split('_')[1];
      await this.rejectPayment(userId, paymentId);
      ctx.reply('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
    });

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.launch();

    // –í–∫–ª—é—á–∞–µ–º graceful stop
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
  }

  async sendNotification(userId, message) {
    try {
      await bot.telegram.sendMessage(userId, message);
      return true;
    } catch (error) {
      console.error('Error sending notification:', error);
      return false;
    }
  }

  async processSuccessfulPayment(userId) {
    try {
      const user = await User.findOne({ where: { telegramId: userId } });
      if (!user) throw new Error('User not found');

      const currentDate = new Date();
      const newEndDate = user.subscriptionEndDate && user.subscriptionEndDate > currentDate
        ? new Date(user.subscriptionEndDate.getTime() + 30 * 24 * 60 * 60 * 1000)
        : new Date(currentDate.getTime() + 30 * 24 * 60 * 60 * 1000);

      await User.update(
        {
          subscriptionEndDate: newEndDate,
          isActive: true
        },
        { where: { telegramId: userId } }
      );

      await this.sendNotification(userId, `
‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!

‚ö° –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ZeusVPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${newEndDate.toLocaleDateString()}

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üöÄ
      `);
    } catch (error) {
      console.error('Error processing payment:', error);
      await this.sendNotification(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support_zeus_vpn');
    }
  }

  async rejectPayment(userId, paymentId) {
    try {
      const user = await User.findOne({ where: { telegramId: userId } });
      if (!user) throw new Error('User not found');

      const paymentHistory = user.paymentHistory.map(payment => 
        payment.id === paymentId 
          ? { ...payment, status: 'rejected' }
          : payment
      );

      await User.update(
        { paymentHistory },
        { where: { telegramId: userId } }
      );

      await this.sendNotification(userId, `
‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π —Å–µ—Ç–∏

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support_zeus_vpn
      `);
    } catch (error) {
      console.error('Error rejecting payment:', error);
    }
  }
}

module.exports = new TelegramService(); 