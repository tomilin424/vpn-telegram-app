const express = require('express');
const router = express.Router();
const paystoService = require('../services/paystoService');
const orderService = require('../services/orderService');
const vpnService = require('../services/vpnService');
const { bot } = require('../bot');

router.post('/payment/webhook', async (req, res) => {
    try {
        const payload = req.body;

        if (!paystoService.verifyPayment(payload)) {
            return res.status(400).send('Invalid signature');
        }

        const { ORDER_ID, STATUS } = payload;

        if (STATUS === 'SUCCESS') {
            try {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                await orderService.updateOrder(ORDER_ID, 'completed');

                // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ ORDER_ID
                const userId = ORDER_ID.split('_')[2];

                try {
                    // –°–æ–∑–¥–∞–µ–º VPN –∫–ª—é—á —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    const vpnKey = await vpnService.createVPNKey(userId);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await bot.telegram.sendMessage(userId, 
                        'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n\n' +
                        'üîë –í–∞—à VPN –∫–ª—é—á –≥–æ—Ç–æ–≤:\n\n' +
                        `<code>${vpnKey}</code>\n\n` +
                        'üì± –≠—Ç–æ—Ç –∫–ª—é—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö\n' +
                        '‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n\n' +
                        'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
                        { parse_mode: 'HTML' }
                    );
                } catch (vpnError) {
                    if (vpnError.message.includes('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤')) {
                        await bot.telegram.sendMessage(userId,
                            '‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–º–∞–∫—Å–∏–º—É–º 3)\n' +
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.'
                        );
                    } else {
                        throw vpnError;
                    }
                }

                res.status(200).send('OK');
            } catch (error) {
                console.error('Error processing successful payment:', error);
                res.status(500).send('Error processing payment');
            }
        } else {
            await orderService.updateOrder(ORDER_ID, 'failed');
            res.status(200).send('OK');
        }
    } catch (error) {
        console.error('Webhook error:', error);
        res.status(500).send('Internal server error');
    }
});

module.exports = router; 