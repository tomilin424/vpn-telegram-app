const express = require('express');
const router = express.Router();
const vpnService = require('../services/vpnService');
const telegramService = require('../services/telegramService');
const paymentService = require('../services/paymentService');
const notificationService = require('../services/notificationService');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const logger = require('../utils/logger');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authMiddleware = require('../middleware/auth');

router.use(authMiddleware);

// –°–æ–∑–¥–∞–Ω–∏–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
router.post('/create-config', async (req, res) => {
  try {
    const { userId } = req.body;
    const result = await vpnService.createConfig(userId);
    if (result.success) {
      await telegramService.sendNotification(userId, `
‚ö° ZeusVPN: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞

‚úÖ –í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üöÄ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
1. –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ WireGuard
3. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:
/support
      `);
      res.json(result);
    } else {
      res.status(400).json(result);
    }
  } catch (error) {
    logger.error('Error creating VPN config:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ VPN
router.get('/status/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const status = await vpnService.getStatus(userId);
    res.json(status);
  } catch (error) {
    logger.error('Error getting VPN status:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
router.post('/payment/crypto', async (req, res) => {
  try {
    const { userId } = req.body;
    const result = await paymentService.createCryptoPayment(userId, 250); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ 250 —Ä—É–±–ª–µ–π
    res.json(result);
  } catch (error) {
    logger.error('Error creating crypto payment:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
router.post('/payment/card', async (req, res) => {
  try {
    const { userId } = req.body;
    const result = await paymentService.createCardPayment(userId, 250); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ 250 —Ä—É–±–ª–µ–π
    res.json(result);
  } catch (error) {
    logger.error('Error creating card payment:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// Webhook –¥–ª—è Stripe
router.post('/webhook/stripe', express.raw({type: 'application/json'}), async (req, res) => {
  try {
    const sig = req.headers['stripe-signature'];
    const event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );
    
    await paymentService.handleStripeWebhook(event);
    logger.info('Stripe webhook processed successfully');
    res.json({received: true});
  } catch (error) {
    logger.error('Stripe webhook error:', error);
    res.status(400).send(`Webhook Error: ${error.message}`);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
router.get('/payment/status/:paymentId', async (req, res) => {
  try {
    const { paymentId } = req.params;
    const status = await paymentService.checkPaymentStatus(paymentId);
    res.json(status);
  } catch (error) {
    logger.error('Error checking payment status:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
router.post('/test-notification', async (req, res) => {
  if (process.env.NODE_ENV !== 'production') {
    try {
      const { userId, type } = req.body;
      
      switch (type) {
        case 'welcome':
          await notificationService.sendWelcomeMessage(userId);
          break;
        case 'expiring':
          await telegramService.sendNotification(userId, `
‚ö° ZeusVPN: –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è

üí° –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ZeusVPN
2. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
3. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

üî• –£—Å–ø–µ–π—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ!
          `);
          break;
        default:
          throw new Error('Unknown notification type');
      }
      
      res.json({ success: true });
    } catch (error) {
      logger.error('Error sending test notification:', error);
      res.status(500).json({ success: false, error: error.message });
    }
  } else {
    res.status(403).json({ error: 'Test endpoints disabled in production' });
  }
});

module.exports = router; 