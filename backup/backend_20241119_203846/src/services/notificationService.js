const User = require('../models/user');
const telegramService = require('./telegramService');
const { Op } = require('sequelize');
const logger = require('../utils/logger');

class NotificationService {
  async checkSubscriptions() {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è
      const users = await User.findAll({
        where: {
          subscriptionEndDate: {
            [Op.between]: [
              new Date(),
              new Date(Date.now() + 3 * 24 * 60 * 60 * 1000)
            ]
          },
          isActive: true
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      for (const user of users) {
        const daysLeft = Math.ceil(
          (new Date(user.subscriptionEndDate) - new Date()) / (1000 * 60 * 60 * 24)
        );

        await telegramService.sendNotification(
          user.telegramId,
          `
‚ö° ZeusVPN: –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç

‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} ${this.getDaysWord(daysLeft)}

üí° –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ZeusVPN
2. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
3. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

üî• –£—Å–ø–µ–π—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ!
`
        );

        logger.info(`Subscription expiration notification sent to user ${user.telegramId}`);
      }

      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
      const expiredUsers = await User.findAll({
        where: {
          subscriptionEndDate: {
            [Op.lt]: new Date()
          },
          isActive: true
        }
      });

      for (const user of expiredUsers) {
        await User.update(
          { isActive: false },
          { where: { id: user.id } }
        );

        await telegramService.sendNotification(
          user.telegramId,
          `
‚ö° ZeusVPN: –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞

‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å

üì± –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ZeusVPN
2. –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É

üí´ –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
`
        );

        logger.info(`Subscription deactivated for user ${user.telegramId}`);
      }
    } catch (error) {
      logger.error('Error checking subscriptions:', error);
    }
  }

  getDaysWord(days) {
    const lastDigit = days % 10;
    const lastTwoDigits = days % 100;

    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
      return '–¥–Ω–µ–π';
    }

    switch (lastDigit) {
      case 1:
        return '–¥–µ–Ω—å';
      case 2:
      case 3:
      case 4:
        return '–¥–Ω—è';
      default:
        return '–¥–Ω–µ–π';
    }
  }

  startDailyCheck() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    this.checkSubscriptions();
    
    const checkTime = () => {
      const now = new Date();
      if (now.getHours() === 10 && now.getMinutes() === 0) {
        this.checkSubscriptions();
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(checkTime, 60000);

    logger.info('Notification service started');
  }

  async sendWelcomeMessage(userId) {
    const message = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZeusVPN!

‚ö° –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π VPN-—Å–µ—Ä–≤–∏—Å —Å –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é

üí´ –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 1 –ì–±–∏—Ç/—Å
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üíé –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:
–ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –≤—Å–µ–≥–æ –∑–∞ 250‚ÇΩ!

üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
1. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä
3. –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å!

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:
/support
`;

    await telegramService.sendNotification(userId, message);
    logger.info(`Welcome message sent to user ${userId}`);
  }
}

module.exports = new NotificationService(); 