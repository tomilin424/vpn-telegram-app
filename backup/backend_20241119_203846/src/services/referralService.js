const User = require('../models/user');
const crypto = require('crypto');
const telegramService = require('./telegramService');

class ReferralService {
  async generateReferralCode(userId) {
    const code = crypto.randomBytes(4).toString('hex');
    await User.update(
      { referralCode: code },
      { where: { telegramId: userId } }
    );
    return code;
  }

  async processReferral(userId, referralCode) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
      const referrer = await User.findOne({
        where: { referralCode }
      });

      if (!referrer) {
        return { success: false, error: 'Invalid referral code' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥
      if (referrer.telegramId === userId) {
        return { success: false, error: 'Cannot use own referral code' };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      await User.update(
        {
          referralCount: referrer.referralCount + 1,
          bonusDays: referrer.bonusDays + 7 // 7 –¥–Ω–µ–π –±–æ–Ω—É—Å–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        },
        { where: { id: referrer.id } }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await User.update(
        {
          referredBy: referrer.telegramId,
          bonusDays: 3 // 3 –¥–Ω—è –±–æ–Ω—É—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        },
        { where: { telegramId: userId } }
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await telegramService.sendNotification(
        referrer.telegramId,
        `üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n‚ö° –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 7 –¥–Ω–µ–π –±–æ–Ω—É—Å–Ω–æ–≥–æ VPN!`
      );

      await telegramService.sendNotification(
        userId,
        `üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!\n\n‚ö° –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 3 –¥–Ω—è –±–æ–Ω—É—Å–Ω–æ–≥–æ VPN!`
      );

      return { success: true };
    } catch (error) {
      console.error('Error processing referral:', error);
      return { success: false, error: error.message };
    }
  }

  async getReferralStats(userId) {
    try {
      const user = await User.findOne({
        where: { telegramId: userId }
      });

      return {
        success: true,
        referralCode: user.referralCode || await this.generateReferralCode(userId),
        referralCount: user.referralCount,
        bonusDays: user.bonusDays
      };
    } catch (error) {
      console.error('Error getting referral stats:', error);
      return { success: false, error: error.message };
    }
  }
}

module.exports = new ReferralService(); 